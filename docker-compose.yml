version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:14
    container_name: datamaster2_postgres
    environment:
      POSTGRES_DB: datamaster2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - datamaster2_network
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: datamaster2_redis
    ports:
      - "6379:6379"
    networks:
      - datamaster2_network
    restart: unless-stopped

  # Aplicação Django
  web:
    build: .
    container_name: datamaster2_web
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=datamaster2
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_DEBUG=True
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./static:/app/static
      - ./media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - datamaster2_network
    restart: unless-stopped
    command: /start.sh

  # Apache Airflow
  airflow:
    image: apache/airflow:2.7.3
    container_name: datamaster2_airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:password@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=HfiIx-FQYqRXvaEYjqv036F_E1T1ZTNbHh5E1U9cFmo=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
    volumes:
      - ./etl/dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - datamaster2_network
    restart: unless-stopped
    command: airflow standalone

  # Nginx (opcional, para produção)
  nginx:
    image: nginx:alpine
    container_name: datamaster2_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/app/static
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - datamaster2_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  datamaster2_network:
    driver: bridge 